basePath: /
definitions:
  handler.ErrorResponse:
    properties:
      error:
        example: Invalid input
        type: string
    type: object
  model.AuthResponse:
    properties:
      email:
        type: string
      role:
        type: string
      token:
        type: string
    type: object
  model.ForgotPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 8
        type: string
      old_password:
        minLength: 8
        type: string
    required:
    - email
    - new_password
    - old_password
    type: object
  model.ForgotPasswordResponse:
    properties:
      message:
        type: string
    type: object
  model.LoginResponse:
    properties:
      token:
        type: string
    type: object
  model.LogoutResponse:
    properties:
      message:
        type: string
    type: object
  model.UserAuthRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - user
        type: string
    required:
    - email
    - password
    - role
    type: object
  model.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: API para autenticação de usuários
  title: Auth Service API
  version: "1.0"
paths:
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Forgot Password Request
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/model.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ForgotPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Request password reset
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Login Request
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: User login
      tags:
      - auth
  /logout:
    post:
      description: Logout user and invalidate JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LogoutResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /me:
    get:
      description: Get authenticated user profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile data
          schema: {}
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User Registration Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
